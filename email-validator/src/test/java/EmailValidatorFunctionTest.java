import com.google.common.testing.TestLogHandler;
import io.cloudevents.CloudEvent;
import io.cloudevents.core.builder.CloudEventBuilder;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import java.net.URI;
import java.nio.charset.StandardCharsets;
import java.util.logging.Logger;

import static com.google.common.truth.Truth.assertThat;

@RunWith(JUnit4.class)
public class EmailValidatorFunctionTest {
  private static final Logger logger = Logger.getLogger(EmailValidatorFunction.class.getName());
  private static final TestLogHandler logHandler = new TestLogHandler();

  @BeforeClass
  public static void beforeClass() {
    logger.addHandler(logHandler);
  }

  @Test
  public void functionsPubsubSubscribe_shouldPrintPubsubMessage() {
    String message = "{\"message\":{\"attributes\":{\"googclient_schemaencoding\":\"BINARY\",\"googclient_schemarevisionid\":\"875f1962\"},\"data\":\"\",\"messageId\":\"7903264091104865\",\"message_id\":\"7903264091104865\",\"publishTime\":\"2023-05-25T13:31:37.648Z\",\"publish_time\":\"2023-05-25T13:31:37.648Z\"},\"subscription\":\"projects/my-page-jpro-test/subscriptions/eventarc-europe-west1-email-validator-099697-sub-906\"}";

    CloudEvent event =
        CloudEventBuilder.v1()
            .withId("0")
            .withType("pubsub.message")
            .withSource(URI.create("https://example.com"))
            .withData(message.getBytes(StandardCharsets.UTF_8))
            .build();

    new EmailValidatorFunction().accept(event);

    assertThat(logHandler.getStoredLogRecords().get(0).getMessage())
            .isEqualTo("Raw event data: " + message);
    assertThat(logHandler.getStoredLogRecords().stream().anyMatch(log -> log.getMessage().equals("ALL VALIDATIONS SUCCESSFUL")))
            .isTrue();
  }
}
